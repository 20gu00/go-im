用go开发一款im系统,至少支持单机10万人同时在线

im是社交办公电商的标配,核心是并发,通常直接关系到用户的使用体验,需要具备处理高并发的能力
实时通信的重要,用户与云端的交互,im是实时通信信息推送的典型技术
例如物联网,云终端


im基础功能:发送文字表情包图片语音视频,扩展发红包表单等
重在快速上手和掌握go开发im相关的技术和流程和思维

系统分布式部署方案,个人不建议啥都整微服务分布式那一套,了解即可
这里后端为主,前端设计次要,如果是网页端使用,注意比如谷歌流浪器这些会对语音相对应的http进行限制


后端技术栈:
websocket,这里用的不是官方的,比官方提供的更好,可以自助选择

反向代理采用nginx,分布式部署中的消息总线MQ和类消息总线redis
udp和http2协议

--------------------------需求分析-------------------------
发送接收
群聊
高并发 单机 分布式 弹性扩容(k8s),理解高并发设计为主,其他没必要



获取资源比如文字语音这些,然后编码,目标是json,就是go的结构体


文字转换成content传输,表情包直接使用共用的url,传输url即可,图片语音先上传到服务器,拿到服务器返回的url,后续也是传输这个url,由im进行传输,传输给个人或者群聊

传输的消息体除了基础的文字表情包图片语音,还要扩展,比如发红包打卡签到等等,注意扩展,不能影响原有的消息体代码
这里就要求提前设计好兼容性强扩展性强的消息体对应的结构体


群聊的特殊,基本功能没区别,特点是一条消息每个参与群聊的终端都要接收到,服务器的压力不小,流量计算
举例子比如发送一个图片512k,100在在线的群同时接受流量就是50M,如果发到1024个群就是50G
解决方案由使用缩略图,更小的大小,提高渲染速度,用户可以选择下载或者默认就能快速下载,原图道理差不多
或者不是直接发送资源也就是整个文件,而是发送的消息体,url这些,用户的系统自行去获取,就不是这个im系统的压力了

单机性能优化主要是代码层面







-----------------------------im结构
前端:ios android web app sdk api websocket
接入层:tcp https http2 websocket
逻辑层:鉴权 登录 用户关系 群聊 单聊 消息上报下发
存储层:mysql(消息存储,历史记录) redis mogondb hbase hive(大数据) 文件服务器(高并发设计)



可以是app微信或者网页通过http或者websocket连接到我们的应用服务器im系统
